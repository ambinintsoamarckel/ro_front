const Sidebar = forwardRef(({ 
  setInitialTaskCount, 
  setCurrentProject, 
  setProjectPage, 
  projects, 
  setProjects, 
  onSecondSidebarToggle 
}, ref) => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [showProjects, setShowProjects] = useState(false);
  const [activeTab, setActiveTab] = useState('home');
  // Nouvel état pour la deuxième sidebar
  const [secondSidebarOpen, setSecondSidebarOpen] = useState(false);
  const [secondSidebarContent, setSecondSidebarContent] = useState('');
  const [openDropdownId, setOpenDropdownId] = useState(null);

  // Exposer les méthodes au composant parent
  useImperativeHandle(ref, () => ({
    openSecondSidebar: (content) => {
      setSecondSidebarContent(content);
      setSecondSidebarOpen(true);
    },
    closeSecondSidebar: () => {
      setSecondSidebarOpen(false);
    },
    openModal: () => {
      setIsModalOpen(true);
    }
  }));

  // Informer le parent quand l'état de la deuxième sidebar change
  useEffect(() => {
    if (onSecondSidebarToggle) {
      onSecondSidebarToggle(secondSidebarOpen);
    }
  }, [secondSidebarOpen, onSecondSidebarToggle]);

  // Charger les projets au montage
  useEffect(() => {
    const fetchProjects = async () => {
      try {
        const response = await fetch("http://localhost:3001/projects", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
          credentials: "include",
        });

        if (response.ok) {
          const data = await response.json();
          setProjects(data);
        } else if (response.status === 404) {
          setProjects([]);
          console.log("Aucun projet trouvé.");
        } else {
          console.error("Erreur serveur :", response.statusText);
        }
      } catch (error) {
        console.error("Erreur API :", error);
      }
    };

    fetchProjects();
  }, [setProjects]);

  const reload = async () => {
    try {
      const response = await fetch("http://localhost:3001/projects", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
      });

      if (response.ok) {
        const data = await response.json();
        setProjects(data);
      } else if (response.status === 404) {
        setProjects([]);
        console.log("Aucun projet trouvé.");
      } else {
        console.error("Erreur serveur :", response.statusText);
      }
    } catch (error) {
      console.error("Erreur API :", error);
    }
  };

  // Fonction pour ouvrir la deuxième sidebar
  const openSecondSidebar = (content) => {
    setSecondSidebarContent(content);
    setSecondSidebarOpen(true);
  };

  // Fonction pour fermer la deuxième sidebar
  const closeSecondSidebar = () => {
    setSecondSidebarOpen(false);
  };

  // Fonction pour le bouton Menu
  const handleMenuClick = () => {
    if (secondSidebarOpen) {
      closeSecondSidebar();
    } else {
      openSecondSidebar('recent');
    }
  };